# Go Web 开发学习路线

## 第一阶段：标准库 http 包基础
当前进度：已完成基础 ping-pong 服务

### 练习 1.1：基础路由和处理器 (难度：★☆☆☆☆)
目标：熟悉 http.HandleFunc 的使用和基本的请求处理

任务 1: 实现基础的 ping-pong 服务
- [ ] 实现 GET /ping 接口，返回 "pong"
- [ ] 使用 http.ResponseWriter 写入响应
- [ ] 正确设置 HTTP 方法为 GET

任务 2: 实现带参数的 Hello 接口
- [ ] 实现 GET /hello 接口，默认返回 "Hello, World!"
- [ ] 支持查询参数 name，示例：GET /hello?name=John
  - 当提供 name 参数时，返回 "Hello, {name}!"
  - 当没有 name 参数时，返回 "Hello, World!"
- [ ] 支持查询参数 language，示例：GET /hello?name=John&language=zh
  - 支持的语言：en（默认）, zh, ja
  - en: "Hello, {name}!"
  - zh: "你好，{name}！"
  - ja: "こんにちは、{name}さん！"
  - 不支持的语言返回默认的英文问候

测试用例：
1. GET /hello
   - 期望响应：`Hello, World!`
2. GET /hello?name=John
   - 期望响应：`Hello, John!`
3. GET /hello?name=张三&language=zh
   - 期望响应：`你好，张三！`
4. GET /hello?name=田中&language=ja
   - 期望响应：`こんにちは、田中さん！`
5. GET /hello?name=John&language=fr
   - 期望响应：`Hello, John!`

代码要求：
1. 使用 req.URL.Query() 获取查询参数
2. 实现参数验证和默认值处理
3. 使用 switch 语句处理不同语言的问候语
4. 使用常量定义支持的语言和对应的问候语模板

评分标准：
1. 功能完整性 (40%)
   - 正确处理所有测试用例
   - 正确处理边界情况（空参数、不支持的语言等）
2. 代码质量 (30%)
   - 代码结构清晰
   - 变量命名合理
   - 使用常量定义固定值
3. 错误处理 (20%)
   - 优雅处理异常情况
   - 提供合适的错误提示
4. 代码注释 (10%)
   - 函数说明
   - 关键逻辑说明

提示：
1. 使用 req.URL.Query().Get("name") 获取查询参数
2. 使用 strings.TrimSpace() 处理参数空格
3. 考虑使用 map 存储不同语言的问候语模板

### 练习 1.2：请求方法和状态码 (难度：★★☆☆☆)
目标：学习 HTTP 方法和状态码的使用
- [ ] 实现一个 POST /echo 接口，将请求体内容返回
- [ ] 当请求方法不正确时返回 405 Method Not Allowed
- [ ] 添加基本的错误处理
提示：使用 http.Error() 处理错误情况

### 练习 1.3：处理 JSON (难度：★★★☆☆)
目标：学习 JSON 处理和自定义响应头
- [ ] 创建一个 Book 结构体，包含 ID、Title、Author 字段
- [ ] 实现 GET /books/{id} 接口，返回一本书的信息
- [ ] 实现 POST /books 接口，接收 JSON 创建新书
提示：使用 encoding/json 包处理 JSON 数据

## 第二阶段：Gin 框架入门

### 练习 2.1：Gin 基础 (难度：★★☆☆☆)
目标：迁移到 Gin 框架
- [ ] 将现有的 ping 接口迁移到 Gin
- [ ] 添加一个使用 Gin 的 /hello 接口
- [ ] 使用 Gin 的参数绑定功能
提示：使用 c.JSON() 返回数据

### 练习 2.2：Gin 中间件 (难度：★★★☆☆)
目标：学习 Gin 中间件的使用
- [ ] 实现一个记录请求日志的中间件
- [ ] 实现一个简单的认证中间件
- [ ] 为特定路由组添加中间件
提示：使用 gin.HandlerFunc 创建中间件

### 练习 2.3：数据验证和绑定 (难度：★★★★☆)
目标：学习请求数据验证
- [ ] 使用结构体标签进行数据验证
- [ ] 实现自定义验证器
- [ ] 处理文件上传
提示：使用 binding 标签和 validator 包

## 第三阶段：进阶特性

### 练习 3.1：RESTful API (难度：★★★★☆)
目标：设计和实现完整的 RESTful API
- [ ] 实现用户 CRUD 操作
- [ ] 添加分页功能
- [ ] 实现基于 JWT 的认证
提示：使用适当的 HTTP 方法和状态码

### 练习 3.2：性能优化 (难度：★★★★★)
目标：提高服务性能和可靠性
- [ ] 实现请求限流
- [ ] 添加缓存层
- [ ] 优化响应时间
提示：使用 time/rate 包实现限流

## 评分标准
- 功能完整性 (40%)：是否实现了所有要求的功能
- 代码质量 (30%)：代码组织、命名规范、错误处理
- 性能表现 (20%)：响应时间、资源使用
- 文档完整性 (10%)：注释、API 文档

每完成一个练习，我都会根据以上标准为您评分，并提供改进建议。

## 如何获取帮助
1. 如果遇到困难，可以请求具体的提示
2. 对于复杂问题，可以请求分步骤的指导
3. 如果需要示例代码，我会提供关键部分的实现

现在您可以开始尝试完成练习 1.1。祝您学习愉快！
